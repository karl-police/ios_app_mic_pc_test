name: iOS starter workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


env:
  IOS_PROJECT_NAME: Github Xcode Demo

  # schema name could be selected from 'xcodebuild -list'
  #IOS_SCHEME_NAME: default


jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      
    
      - name: Resolve package dependencies
        shell: bash
        run: xcodebuild -resolvePackageDependencies


      - name: Build the xcarchive
        env:
          scheme: ${{ 'default' }}
          #platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          #xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"


          xcodebuild -scheme "$scheme" -"$filetype_parameter" "$file_to_build" \
            -archivePath "$PWD/build/${IOS_PROJECT_NAME}.xcarchive" \
            -destination "generic/platform=iOS" \
            -sdk iphoneos \
            clean archive CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY="Apple Distribution" 
      
      #- name: Test
      #  env:
      #    scheme: ${{ 'default' }}
      #    platform: ${{ 'iOS Simulator' }}
      #  run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
      #    device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
      #    if [ $scheme = default ]; then scheme=$(cat default); fi
      #    if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
      #    file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
      #    xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"

      #- name: Test Path
      #  run: |
      #    pwd
      #    ls -d */
      #    ls

      #- name: Export .ipa file
      #  shell: bash
      #  run: |
      #    xcodebuild -archivePath "$PWD/build/${IOS_PROJECT_NAME}.xcarchive" \
      #      -exportOptionsPlist Support/ExportOptions.plist \
      #      -exportPath "$PWD/build/${IOS_PROJECT_NAME}" \
      #      -exportArchive



      - name: Extract Unsigned App from Archive
        run: | 
          cd "$PWD/build/" \
            && zip -r "$PWD/${IOS_PROJECT_NAME}.zip" "${IOS_PROJECT_NAME}.app"
          ls -ale "$PWD/${IOS_PROJECT_NAME}.app.zip"

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          #name: ${IOS_PROJECT_NAME}.ipa
          name: ${IOS_PROJECT_NAME}.app.zip
          path: $PWD/build/*.zip